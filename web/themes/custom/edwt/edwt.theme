<?php

/**
 * @file
 * Eau de Web Theme theme file.
 */

use Drupal\Core\Render\Element;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Serialization\Yaml;
use Drupal\Component\Serialization\Exception\InvalidDataTypeException;
use Drupal\Core\Asset\Exception\InvalidLibraryFileException;

/**
 * Implements hook_page_attachments_alter().
 */
function edwt_page_attachments_alter(array &$page) {
  include 'theme-settings/style-root.inc';
}

/**
 * Implements hook_preprocess_HOOK() for menu-local-task templates.
 */
function edwt_preprocess_menu_local_task(&$variables) {
  if (isset($variables['is_active']) && $variables['is_active'] === TRUE) {
    $variables['link']['#options']['attributes']['class'][] = 'active is-active';
  }
  else {
    $variables['link']['#options']['attributes']['class'][] = 'nav-link';
  }

  if (isset($variables['element']['#level'])) {
    $variables['level'] = $variables['element']['#level'];
  }
}

/**
 * Implements theme_preprocess_status_messages().
 */
function edwt_preprocess_status_messages(&$variables) {
  $variables['status_message_type'] = theme_get_setting('sg__status_message_type');
}

/**
 * Implements theme_preprocess_page().
 */
function edwt_preprocess_page(&$variables) {
  $variables['global'] = [
    'container' => theme_get_setting('sg__container'),
  ];

  $route = \Drupal::routeMatch()->getRouteName();
  if (!str_starts_with( $route, 'layout_builder' )) {
    $ns_position = theme_get_setting('ns__navbar_position');
  }

  // Navbar settings
  $variables['navbar'] = [
    'position' => $ns_position,
    'expand' => theme_get_setting('ns__navbar_expand'),
    'color' => theme_get_setting('ns__navbar_color'),
    'bg' => theme_get_setting('ns__navbar_bg'),
    'out' => theme_get_setting('ns__navbar_out'),
    'align' => theme_get_setting('ns__navbar_align'),
  ];
}

/**
 * Implements theme_preprocess_block().
 */
function edwt_preprocess_block(&$variables) {
}

/**
 * Implements theme_preprocess_datetime_form().
 */
function edwt_preprocess_datetime_form(&$variables) {
  $variables['attributes']['class'][] = 'form-inline';
}

/**
 * Implements hook_form_alter().
 */
function edwt_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  $inline_form = preg_split('/\r\n|[\r\n]/', theme_get_setting('fs__form_input_group'));

  if (
    in_array($form_id, $inline_form)
  ) {
    $form['#form_inline'] = $form_id;
    _edwt_attach_form_id($form, $form_id);
  }
}

/**
 * Attaches form id to all form elements.
 */
function _edwt_attach_form_id(&$form, $form_id) {
  foreach (Element::children($form) as $child) {
    if (
      !isset($form[$child]['#form_inline'])
    ) {
      $form[$child]['#form_inline'] = $form_id;
    }
    _edwt_attach_form_id($form[$child], $form_id);
  }
}

/**
 * Implements hook_preprocess_HOOK() for region.html.twig.
 */
function edwt_preprocess_region(&$variables) {
  if (theme_get_setting('sr__class_' . $variables['elements']['#region']) !== NULL) {
    $classes = explode(" ", theme_get_setting('sr__class_' . $variables['elements']['#region']));
    $variables['attributes']['class'] = $classes;
  }

  if (theme_get_setting('sr__clean_' . $variables['elements']['#region']) !== NULL) {
    $variables['wrapper'] = theme_get_setting('sr__clean_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__container_' . $variables['elements']['#region']) !== NULL) {
    $variables['container']['type'] = theme_get_setting('sr__container_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__container_position_' . $variables['elements']['#region']) !== NULL) {
    $variables['container']['position'] = theme_get_setting('sr__container_position_' . $variables['elements']['#region']);
  }

  if (theme_get_setting('sr__extra_class_' . $variables['elements']['#region']) !== NULL) {
    $variables['extra_classes'] = theme_get_setting('sr__extra_class_' . $variables['elements']['#region']);
  }
}

/**
 * Implements hook_theme_suggestions_alter()
 */
function edwt_theme_suggestions_alter(array &$suggestions, array $variables, $hook) {
  if (
    isset($variables['element']['#form_inline'])
  ) {
    $element = $variables['element'];
    $formid = str_replace('-', '_', $element['#form_inline']);
    $suggestions[] = $hook . '__input_group';
    $suggestions[] = $hook . '__input_group__' . $formid;
  }
}

/**
 * Implements hook_library_info_alter().
 */
function edwt_library_info_alter(&$libraries, $extension) {
  $theme_name = basename(__FILE__, '.theme');
  $theme_path = drupal_get_path('theme', $theme_name);

  if ($extension == $theme_name) {
    $directory_iterator = new RecursiveDirectoryIterator($theme_path . '/templates/components/');

    foreach (new RecursiveIteratorIterator($directory_iterator) as $file) {
      if ($file->getFilename() == 'libraries.yml') {
        try {
          $componentPathFromRoot = substr($file->getPathName(), 0, -13);
          $componentPathFromTheme = str_replace($theme_path . '/', '', $componentPathFromRoot);
          $new_libraries = Yaml::decode(file_get_contents($file->getRealPath()));

          foreach ($new_libraries as $key => $new_library) {
            if(isset($libraries[$key])) {
              \Drupal::messenger()
                ->addWarning(t('The library @key from the theme @themename has multiple definitions.', [
                  '@key' => $key,
                  '@themename' => $theme_name,
                ]));
            } else {
              if (isset($new_library['css'])) {
                foreach($new_library['css'] as $group_key => $css_grouped) {
                  foreach($css_grouped as $file_key => $css_file) {
                    if(substr($file_key, 0, 13) == 'css/templates') {
                    } else {
                      if (isset($css_file['type'])) {
                        if ($css_file['type'] == 'external') {
                          continue;
                        }
                      }

                      $new_library['css'][$group_key][$componentPathFromTheme . $file_key] = $css_file;
                      unset($new_library['css'][$group_key][$file_key]);
                    }
                  }
                }
              }

              if (isset($new_library['js'])) {
                foreach($new_library['js'] as $file_key => $js_file) {
                  if(substr($file_key, 0, 11) == '/templates/components') {
                  } else {
                    if (isset($js_file['type'])) {
                      if ($js_file['type'] == 'external') {
                        continue;
                      }
                    }

                    $new_library['js'][$componentPathFromTheme . $file_key] = $js_file;
                    unset($new_library['js'][$file_key]);
                  }
                }
              }

              $libraries[$key] = $new_library;
            }
          }
        } catch (InvalidDataTypeException $e) {
          throw new InvalidLibraryFileException(sprintf('Invalid library definition in %s: %s', $file->getRealPath(), $e->getMessage()), 0, $e);
        }
      }
    }
  };
}
